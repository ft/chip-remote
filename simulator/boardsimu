#!/usr/bin/perl

# Copyright (c) 2011-2018 chip-remote workers, All rights reserved.
#
# Terms for redistribution and use can be found in LICENCE.

# This script's job is it to simulate the actual `chip-remote' hardware via one
# of the operating system's virtual terminal devices. It allows for quick
# testing and extension of the serial protocol between the host and the slave
# board. The test-suite could possibly use this as well.

use strict;
use warnings;
use diagnostics;

use English qw{ -no_match_vars };
use POSIX qw{ :sys_wait_h
              :termios_h };
use IO::Pty;

my $VERSION = q{VERSION 2 0 0};
my (%cb, %cnf, $done, $retval, $cpid, $state);

### Callbacks #################################################################

sub cb_features;
sub cb_ports;
sub cb_more;

%cb = (
    'HI' => { state => q{init},
              code  => sub { $state = q{main};
                             return "Hi there, stranger." } },
    'VERSION' => { state => q{main},
                   code  => sub { return $VERSION } },
    'FOCUS' => { state => q{main},
                 code  => \&cb_focus },
    'FEATURES' => { state => q{main},
                    code  => sub { $state = q{features};
                                   return cb_features(@_) } },
    'MODES' => { state => q{main},
                 code => sub { $state = q{modes},
                               return cb_modes(@_) } },
    'PORTS' => { state => q{main},
                 code  => sub { $state = q{ports};
                                return cb_ports(@_) } },
    'INIT' => { state => q{main},
                code => sub { return "OK" } },
    'LINE' => { state => q{main},
                code => sub { return "OK" } },
    'SET' => { state => q{main},
               code => sub { return "OK" } },
    'ADDRESS' => { state => q{main},
                   code => sub { return "OK" } },
    'TRANSMIT' => { state => q{main},
                    code => sub { return "0" } },
    'MORE' => { state => [ qw{ features modes ports } ],
                code  => \&cb_more },
    'BYE' => { state => q{main},
               code  => sub { $done = 1 unless ($cnf{endless});
                              $state = q{init};
                              return "Have a nice day." } }
);

sub __hexstring2num {
    my ($s, $f) = @_;
    my ($n, $neg, $pos, %v);

    $neg = 1;
    $neg = -1 if ($s =~ s/^-//);

    foreach my $k (0 .. 9) { $v{"$k"} = $k }
    $v{a} = 10; $v{b} = 11; $v{c} = 12;
    $v{d} = 13; $v{e} = 14; $v{f} = 15;

    ${ $f } = $pos = $n = 0;
    foreach my $digit (reverse split //, $s) {
        if (!defined $v{lc $digit}) {
            ${ $f } = 1;
            return $neg * $n;
        }
        $n += $v{lc $digit} * (16 ** $pos);
    }

    return $neg * $n;
}

my $__list_cnt;
sub __cb_list_more {
    my ($l, $c, $p, $cmd) = @_;
    shift; shift; shift;

    return "MALFORMED-COMMAND" if ($#_ != 0);

    if ($cmd eq $c) {
        $__list_cnt = 0;
    } else {
        $__list_cnt++;
    }

    if ($__list_cnt > $#{ $l }) {
        $state = $p;
        return "DONE";
    }

    return $l->[$__list_cnt];
}

sub cb_features {
    my @f = ( qw{ FOCUS INIT LINES LINE MODES PORT PORTS SET } );
    return __cb_list_more(\@f, 'FEATURES', 'main', @_);
}

sub cb_modes {
    my @f = ( qw{ SPI } );
    return __cb_list_more(\@f, 'MODES', 'main', @_);
}

sub cb_ports {
    my @o = ( q{PORTS 1},
              q{FOCUS 0} );
    return __cb_list_more(\@o, 'PORTS', 'main', @_);
}

sub cb_more {
    my ($cmd) = @_;

    return cb_features($cmd) if ($state eq q{features});
    return cb_ports($cmd) if ($state eq q{ports});
    return cb_modes($cmd) if ($state eq q{modes});
    return "BUG-SHOULD-NOT-BE-REACHED";
}

sub cb_focus {
    my ($cmd, $s) = @_;
    my ($max, $num, $fail);

    return "MALFORMED-COMMAND" if ($#_ != 1);

    $max = 5;
    $num = __hexstring2num($s, \$fail);

    return "BROKEN-VALUE $s" if ($fail);
    return "VALUE-OUT-OF-RANGE $s" if ($num < 0 || $num > $max);
    return "OK";
}

###############################################################################

%cnf = (
    delay => 0,
    endless => 0,
    fork => 0
);

do {
    sub usage {
        print q{
 Usage: boardsimu [OPTION(s)]

  --help, -h             Display this help text.
  --delay, -d <N>        Sleep for N seconds after reading intput.
  --fork, -f             Fork a command right after terminal dev. is set up
  --endless, -e          Do not quit after "BYE".

If `--fork' is used, the command-line arguments that remain after option
handling will be used as the command that is being run within the child
process. Also, the this script will use the child's return value as its own.
That way this script can be used to imitate a physical board in the project's
test suite.

};

    }

    use Getopt::Long;
    my ($rc);

    Getopt::Long::Configure(
        'require_order', 'no_gnu_compat', 'auto_abbrev',
        'no_ignore_case', 'bundling');

    $rc = GetOptions ( "help|h" => sub { usage; exit 0 },
                       "delay|d=i" => sub { $cnf{delay} = $_[1] },
                       "endless|e", => sub { $cnf{endless} = 1 },
                       "fork|f", => sub { $cnf{fork} = 1 } );

    if (!$rc) {
        usage;
        exit 1;
    }

    if (!$cnf{fork} && $#ARGV >= 0) {
        print "\nRemaining arguments without `--fork'?\n";
        usage;
        exit 1;
    }
};

my ($fh, $dev, $pty);

sub board_rx {
    my ($input) = @_;
    $input =~ s/[\r\n]+//;
    print "# >>> " . $input . "\n";
    sleep $cnf{delay} if ($cnf{delay} > 0);
    return $input;
}

sub board_tx {
    my ($dev, $output) = @_;
    print "# <<< " . $output . "\n";
    print $dev "$output\n";
}

$dev = POSIX::Termios->new;
$pty = IO::Pty->new;
$fh = $pty->slave;

print "# Connecting to device `" . $fh->ttyname . "'...\n";
$ENV{CR_BOARD_DEVICE} = $fh->ttyname;

# Setup serial device...
$dev->getattr(fileno($fh)) or die "Could not get attributes: $ERRNO\n";

$dev->setispeed(B19200) or die "Could not set input speed: $ERRNO\n";
$dev->setospeed(B19200) or die "Could not set output speed: $ERRNO\n";

$dev->setcflag(($dev->getcflag
                   | (CSIZE | PARENB | CS8 | CREAD | CLOCAL | HUPCL))
                   & ~(IXON | IXOFF));

$dev->setiflag($dev->getiflag
                   | IGNBRK);

$dev->setlflag($dev->getlflag
                   & ~(ICANON | ECHO | ECHONL | ECHOK | ECHONL));

$dev->setoflag($dev->getoflag
                   & ~(OPOST));

$dev->setcc(VMIN, 1);
$dev->setcc(VTIME, 0);

$dev->setattr(fileno($fh), TCSANOW) or die "Could not set attributes: $ERRNO\n";

sub allowed_state {
    my ($state, $allowed) = @_;

    if (ref $allowed eq 'ARRAY') {
        for my $i (@{ $allowed}) {
            return 1 if ($state eq $i);
        }
    } else {
        return 1 if ($state eq $allowed);
    }

    return 0;
}

sub handle_sigchld {
    my $p;
    while (($p = waitpid(-1, &WNOHANG)) > 0) {
        $retval = ${^CHILD_ERROR_NATIVE};
        print "# -!- Child process exited: $p (return: $retval)\n";
        close $fh;
        exit ($retval > 0) ? 1 : 0;
    }
    $SIG{CHLD} = \&handle_sigchld;
}

$SIG{CHLD} = \&handle_sigchld;

$retval = 0;

if ($cnf{fork}) {
    if ($cpid = fork) {
        print "# -!- Forked process: $cpid\n";
    } else {
        exec(@ARGV);
    }
}

# Read-Reply loop
$done = 0;
$state = q{init};
RR: while (my $input = <$pty>) {
    my (@cmd, $f, $pstate);

    $pstate = $state;
    $input = board_rx($input);
    @cmd = split /\s+/, $input;
    $f = $cb{$cmd[0]};

    if (defined $f->{code} and ref($f->{code}) eq q{CODE}) {
        my $ret = $f->{code}->(@cmd) if (allowed_state($state, $f->{state}));
        board_tx($pty, (defined $ret) ? $ret : q{WTF});
    } else {
        board_tx($pty, qq{WTF Unknown command: $cmd[0]});
    }

    print "# -!- Changed state: $pstate -> $state\n" if ($pstate ne $state);
    last RR if ($done);
}

if ($cnf{fork}) {
    my $pid;
    if (($pid = wait) >= 0) {
        $retval = ${^CHILD_ERROR_NATIVE};
        print "# -!- Collecting child process $pid (return: $retval)\n";
        if ($pid != $cpid) {
            print "# -!- Warning: $cpid != $pid! (this shouldn't happen)\n";
        }
    }
} else {
    sleep 1;
}

close $fh;
exit ($retval > 0) ? 1 : 0;
