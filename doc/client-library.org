* Overview of the chip-remote client library

The client library is written in Scheme (in particular, the GNU Guile
implementation of the language). The reasons for this choice range from the
excellent numeric qualities of the language, as well as its natural handling of
lists (and nested lists, aka. tables) and symbolic values, to the possibility
of introducing syntactic extensions, so that complex repetitive programming
tasks become more straight forward and elegant.

** Structure

Most of the library lives in the (chip-remote ...) namespace.

Device-specific modules live in the (chip-remote devices ...) namespace and are
grouped by manufacturer. That means that devices built by Texas Instruments
have their modules living in (chip-remote devices ti ...). Each device gets its
own namespace within there, to store modules that describe a device's
register-map, translation tables and the like.

Example: The chip-remote modules for the ADS4149 analog-to-digital converter
from Texas Instruments are the following:

- (chip-remote devices ti ads4149): The high-level module that offers
  functionality to conveniently deal with such a device connected to a remote
  controller.

- (chip-remote devices ti ads4149 registers): Defines the device's
  register-map, custom decoding helpers as well as first-level access
  functions.

- (chip-remote devices ti ads4149 tables): Defines the device's translation
  tables, that map human-readable symbolic values like ‘aligned’ to binary
  values such as “#b10”.

- (chip-remote devices ti ads4149 program): Defines second-level access
  functions.

  About the different levels of access, see “Levels of Access” below.


** Syntactic Extension

The client library uses Scheme's ~syntax-case~ macro system to implement
syntactic extensions to the language in order to be able to express device
descriptions in a concise manner. At the heart of these extensions lies the
~(chip-remote process-plist)~ module. It offers utilities to implement macros
that behave like this:

#+BEGIN_SRC scheme
(define-device foobar
  #:manufacturer some-company
  #:homepage "http://somecomp.tld/foobar"
  #:datasheet "http://docs.somecomp.tld/foobar.pdf"
  #:keywords '(foo and bar)
  #:register-width 16
  #:register (#:contents (enable-output? 0 1 #:default 'no)
                         (shutdown? 1 1 #:default 'no)
                         (reserved 2 2)
                         (low-pass-cfg 4 8
                                       #:validate range (>= 12) (<= 140)
                                       #:semantics unsigned-int
                                       #:default 48)
                         (gain-cfg 12 4
                                   #:semantics lookup gain-cfg
                                   #:default '0dB)))
#+END_SRC

Keywords are used to group information into logical chunks. The grouping is
configurable and completly controllable.


** Device Descriptions

One of the essential jobs of the library is its ability to describe devices in
much detail. A device description consists of the following:

- Device description, containing…
  - Meta-Information about the device.
  - A Page-Table.

To understand page-tables it is useful to understand the organisation of data
in a configurable device from the ground up. At its core a device can be
described by items that are grouped into registers. An item is a sequence of
bits, that represents a value using arbitrary semantics. Multiple registers are
organised in register maps, that map addresses to actual registers.

In some devices, designers choose — for one reason or another — to group
registers in more than one table (register maps). This is where page maps come
in. They map addresses to register maps. Page maps are sometimes called memory
pages or memory banks.

There are a great many device specific subtleties that the library tries to
support. Many devices only have one register-map and therefore not a meaningful
page-map. Some only have one register and therefore not a meaningful
register-map either. In some devices, registers have fixed width; in others
not.

In some devices it's possible to read the values of registers. In others its
not. In some devices registers can be accessed in random order. In others they
can only be tranferred in bulk. And sometimes the registers even need to be
programmed in specific order.

In summary, the most important data types describing devices are:

- device
- page-map
- register-map
- register
- item

*** (chip-remote item)

The item library is at the core of the description of an atom that makes up
part of a device's configuration. The most important pieces of information
captured by an item are these:

- A name
- An offset within a register
- A width
- Semantics converting from human to machine readable and vica verca
- A validator

The module supports a couple of built-in semantics and validators. To allow
extensions to this system, there are the ~semantics~ and ~validate~ modules to
define custom instances.

**** (chip-remote semantics)

**** (chip-remote validate)

** Non-Device-Specific Modules

*** (chip-remote bit-operations)

This module implements a number of utilities that deal with manipulating blocks
of bits in integers, that are not implemented by the libraries shipped with GNU
Guile. These function are used in particular by the first-level access
functions, that are derived from a device's register-map.

*** (chip-remote io)

This is the low-level input-output library that sends strings to a remote
controller and receives strings from it. It currently only supports connections
via device files (such as serial links; one example would be /dev/ttyUSB0 on
current Linux boxes).

*** (chip-remote protocol)

This module implements the RCCEP protocol as described in the included
specification. It uses the connection abstraction from the “io” module to talk
to the remote controller.

*** (chip-remote assemble)

This module is a layer of abstraction to concisely express second-level
functions. It helps with enforcing constraints on given values, untangle
active-high vs. active-low logic, convert human readable data to bits via table
look up or application of an algorithm (like ‘value->twos-complement’).

*** (chip-remote decode) and (chip-remote decode to-text)

So far, everything in the system had to do with modifying register values. But
chip-remote also wants to help with the interpretation of given register
values. This approach works by looking at additional annotations in the
register-map, where you can tell the system “By the way, if you want to decode
this set of bits, do a reverse-lookup in the ‘foobar-map’ table”.

The frontend function to this is the ‘decode’ function, that is called like
this:

#+BEGIN_SRC scheme
(decode register-map address register-value)
#+END_SRC

It returns a data-structure, that describes the ‘register-value’ as interpreted
as the register at ‘address’ in ‘register-map’. This is still scheme data.

The (chip-remote decode to-text) module in turn provides a renderer, that turns
that data structure into pure human readable text. It contains a frontend
called ‘register->text’ that produces a list of lines that look like this:

#+BEGIN_EXAMPLE
    Decoding register at address: 0x25
      (octal: o45, binary: 100101b, decimal: 37)
    Value: [hex: 0x00] [bin: 00000000b]
      Field "test-pattern":
        Value: [0x0] [000b] - width: 3, offset: 0
        Decoded: normal
      Field "disable-gain":
        Value: [0x0] [0b] - width: 1, offset: 3
        Decoded: disabled
      Field "gain":
        Value: [0x0] [0000b] - width: 4, offset: 4
        Decoded: 0
#+END_EXAMPLE

*** (chip-remote bit-decoders)

This implements a few callback functions, that may be used in register-map
decoding annotations.

*** (chip-remote register-map)

See “The Register-Map Abstraction” below.

** The (chip-remote test) Namespace

The “test” namespace contains code, that is only used when running the
project's test suite. It is therefore not even installed to the system with the
rest of the framework.

** The Register-Map Abstraction

*** Overview

Most configurable ICs use a region of memory, that stores their adjustable
parameters. That region is usually addressable. These addresses within that
memory can be viewed as a table. This table's rows are called registers.

Oftentimes, registers have a fixed width. But that is not a general rule. And
(most often with variable-width registers) some chips allow addressing
sub-registers.

Moreover, sometimes chips use more than one region addressable memory to store
their parameters. In those cases, these regions are addressable as multiple
memory pages (sometimes called “banks”).

The register-map abstraction has to account for all of these variations and be
generic enough to allow for possible extensions upon that scheme.

In Scheme, the natural way to represent a table is a list of lists. In this
particular implementation, we will be using association lists, where all the
addressing information will be contained within the ‘key’ portion of the data-
structure (memory bank as well as register address, width and name — none of
which are mandatory).

Upon this data-structure multiple selectors will be implemented: For example:
Select by register address, select be register and bank address, etc. Higher
level code can then alias its register access in terms of these generic
accessors.

*** The Datasheet

Let's look at a finctional device called “bfg2000”. Its datasheet describes a
register map that looks like this:

        |                      3 |             2 |            1 |          0 |
        |------------------------+---------------+--------------+------------|
    0x0 | high-performance       |          blast-radius        | power-down |
        |------------------------+---------------+--------------+------------|
    0x1 |                         self-destruct-password                     |
        |------------------------+---------------+--------------+------------|
    0xa |                               fire-rate                            |
        |------------------------+---------------+--------------+------------|
    0xb |   remote-controlled    | self-destruct |        blast - type       |
        |------------------------+---------------+--------------+------------|

That's a pretty simple table, fixed width registers with no sub-addressing, but
varying widths in its sub-fields and a hole consisting of the addresses between
0x2 and 0x9.

*** The First Transcription

So a first attempt at expressing that table using the register-map abstraction
looks like this:

      (define-register-map bfg2000
        (#x0 (contents (power-down 0 1)
                       (blast-radius 1 2)
                       (high-performance 3 1)))
        (#x1 (contents (self-destruct-password 0 4)))
        (#xa (contents (fire-rate 0 4)))
        (#xb (contents (blast-type 0 2)
                       (self-destruct 2 1)
                       (remote-controlled 3 1))))

If you look at:

        (#x0 (contents (power-down 0 1)
                       (blast-radius 1 2)
                       (high-performance 3 1)))

That means, it describes the register at address 0x0, which contains the
following fields:

      - power-down at offset 0 with width 1
      - blast-radius at offset 1 with width 2
      - high-performance at offset 3 with width 1

In short, it's a direct transcription of the register-map from the data-sheet
into a scheme data-structure. The ‘define-register-map’ macro now goes ahead
and defines the following set of first-level access (for the example of the
‘blast-radius’ bits:

      (set-blast-radius-bits regval bits)
      (get-blast-radius-bits regval)
      (define regaddr:blast-radius #x0)

And it does this for all bit fields. You get the first-level access functions
for free.

*** More Information about the Bit-Fields

The datasheet will undoubtedly contain more information about the content and
the encoding of the bit-fields. For example:

Power-Down, High-Performance, Remote-Controlled and Self-Destruct are
single-bit configuration values, that work as Active-High logic (i.e. 1 means
enabled, 0 means disabled).

The Self-Destruct-Password is a four bit signed integer, that uses twos-
complement to encode its value. Fire-rate is an unsigned integer.

Blast-Radius and Blast-Type are 2-bit values that are mapped like this:

     (define blast-type-map '((projectile . #b00)
                              (plasma     . #b01)
                              (lightning  . #b10)
                              (nuclear    . #b11)))

     (define blast-radius-map '((building  . #b00)
                                (nation    . #b01)
                                (planetary . #b10)
                                (galaxy    . #b11)))

This information is crucial for writing second-level access code and for
decoding register values back into human-readable form. Which means that you'd
like to inform the system about that, so it can do more work for you.

Previously we had the following expression, describing the ‘power-down’ bit:

        (power-down 0 1)

To tell the system, that that's a bit that works as “active-high” logic, that
definition could be annotated like this:

        (power-down 0 1 #,(=> logic-active-high))

Here ‘logic-active-high’ is a function, a bit into a boolean value.

Another example would be the “blast-radius” bits that are defined by the
mapping defined earlier. To tell the system that connection, we add an
annotation like this:

        (blast-radius 1 2 #,(=> blast-radius-map))

If no annotation is defined, the default is the ‘literal-binary’ function, that
takes the bit-field literally without any other interpretation.

A complete and annotated register map definition could look like this:

      (define-register-map bfg2000
        (#x0 (contents (power-down 0 1 #,(=> logic-active-high))
                       (blast-radius 1 2 #,(=> blast-radius-map))
                       (high-performance 3 1 #,(=> logic-active-high))))
        (#x1 (contents (self-destruct-password 0 4 #,(=> twos-complement))))
        (#xa (contents (fire-rate 0 4 #,(=> unsigned-integer))))
        (#xb (contents (blast-type 0 2 #,(=> blast-type-map))
                       (self-destruct 2 1 #,(=> logic-active-high))
                       (remote-controlled 3 1 #,(=> logic-active-high)))))

With careful definition and annotation such as this, the decoder part of the
framework will just work.
