---
title: Chip Remote
subtitle: Reference Manual
author:
- name: Frank Terbeck
  email: ft@bewatermyfriend.org
section: 7
date: Apr, 2021
...

# NAME

`chip-remote` — A library device configuration manipulation

# DESCRIPTION

Chip-remote is a library that defines a framework that allows tight
specification of a configurable chip's configuration memory, including its
semantics, as well as the chip's interface to actually access and interact with
that memory.

In order to actually drive transmitting bits to electrical devices, the system
defines a simple text-based protocol, that is implemented in an embedded system
firmware, that is also part of the project. This is required, because normal
desktop computers don't have user-facing interfaces like SPI or I²C.

The initial goal for chip-remote was to facilitate rapid prototyping with new
electrical components. In the meantime, it has grown many more features beyond
that. It can decode values found in physical devices; interactively change some
or all of the settings in such a device. It can be used to analyse protocol
transcripts from logic analysers. It can be used to simulate a physical device
to exercise a device driver, including error-case behaviour that would be hard
to produce with actual hardware. Since everything regarding a device
specification is accessible in a programmatic way, by using the library's API,
the possibilities are far reaching. The “holy grail” — so to speak — of the
library would be to be able to generate a device-driver for arbitrary
programming languages and system interfaces, that offer a high-level API. At
the time of writing, the system still allows for too many degrees of freedom in
the specification, which makes a general solution to a large subset of all
available devices unachievable for now. Of course, this doesn't impede the
utility of the existing features of the library.


# CORE PRINCIPLES

At its core, most of chip-remote's functionality revolves around the
specification of a configurable device's configuration memory. This
specification is a hierarchy of data types.

The smallest, indivisible entity of a device specification is an **item**. An
item in terms of chip-remote is a string of one or more bits, that have a fixed
width (the number of bits in the string) as well as an offset, with an
associated specification of the semantics of that string of bits. They may
represent some sort of integer value, or be keys to a table lookup, or have
another non-trivial relationship to a set of values suitable to humans.

Building from items are **registers**: They combine one or more items.
Registers are the entity that is most commonly used in actual electrical
transfer into and out of the device.

While there are devices, that have only the one register that serves as its
configuration container, more often than not a device uses multiple registers.
To be able to talk about multiple registers, they are assigned addresses. A
mapping from address to register is called a **register-map** and with the
majority of chips they are the top-level concept for organising chip data.

Some chips, however, have more than one register-map. To talk about them, they
also get addresses. The resulting table, mapping addresses to register-maps is
called a **page-map**.

On top of all this sits a **device**, that has a slot for one such page-map. It
also carries meta-information about the chip (like its manufacturer, the URL
for its data sheet etc.), as well as a specification of its electrical
interface and possibly a specification of meta-items (called **combinations**)
that are made up of simple items, that can live in different part of the
device's page-map.

The rest of the library, described herein, is basically a framework for working
with information found in such device specifications, as well as a repository
of instances of such specifications.


# MODULE REFERENCE

## Core Modules

### `(chip-remote bit-operations)`

@include scheme/chip-remote/bit-operations.mdwn@

### `(chip-remote codecs)`

@include scheme/chip-remote/codecs.mdwn@

### `(chip-remote combination)`

@include scheme/chip-remote/combination.mdwn@

### `(chip-remote commander)`

@include scheme/chip-remote/commander.mdwn@

### `(chip-remote decode)`

@include scheme/chip-remote/decode.mdwn@

### `(chip-remote decode to-c-values)`

@include scheme/chip-remote/decode/to-c-values.mdwn@

### `(chip-remote decode to-text)`

@include scheme/chip-remote/decode/to-text.mdwn@

### `(chip-remote decode types)`

@include scheme/chip-remote/decode/types.mdwn@

### `(chip-remote device access)`

@include scheme/chip-remote/device/access.mdwn@

### `(chip-remote device)`

@include scheme/chip-remote/device.mdwn@

### `(chip-remote device spi)`

@include scheme/chip-remote/device/spi.mdwn@

### `(chip-remote device transmit)`

@include scheme/chip-remote/device/transmit.mdwn@

### `(chip-remote frontend)`

@include scheme/chip-remote/frontend.mdwn@

### `(chip-remote interact)`

@include scheme/chip-remote/interact.mdwn@

### `(chip-remote interpreter)`

@include scheme/chip-remote/interpreter.mdwn@

### `(chip-remote item access)`

@include scheme/chip-remote/item/access.mdwn@

### `(chip-remote item builder)`

@include scheme/chip-remote/item/builder.mdwn@

### `(chip-remote item)`

@include scheme/chip-remote/item.mdwn@

### `(chip-remote manufacturer)`

@include scheme/chip-remote/manufacturer.mdwn@

### `(chip-remote modify)`

@include scheme/chip-remote/modify.mdwn@

### `(chip-remote named-value)`

@include scheme/chip-remote/named-value.mdwn@

### `(chip-remote page-map)`

@include scheme/chip-remote/page-map.mdwn@

### `(chip-remote protocol)`

@include scheme/chip-remote/protocol.mdwn@

### `(chip-remote register common)`

@include scheme/chip-remote/register/common.mdwn@

### `(chip-remote register-map)`

@include scheme/chip-remote/register-map.mdwn@

### `(chip-remote register-map utilities)`

@include scheme/chip-remote/register-map/utilities.mdwn@

### `(chip-remote register)`

@include scheme/chip-remote/register.mdwn@

### `(chip-remote register modifiers)`

@include scheme/chip-remote/register/modifiers.mdwn@

### `(chip-remote register predicates)`

@include scheme/chip-remote/register/predicates.mdwn@

### `(chip-remote register-window)`

@include scheme/chip-remote/register-window.mdwn@

### `(chip-remote semantics)`

@include scheme/chip-remote/semantics.mdwn@

### `(chip-remote simplify)`

@include scheme/chip-remote/simplify.mdwn@

### `(chip-remote type-operations)`

@include scheme/chip-remote/type-operations.mdwn@

### `(chip-remote units)`

@include scheme/chip-remote/units.mdwn@

### `(chip-remote utilities)`

@include scheme/chip-remote/utilities.mdwn@


## Data Structures

### `(data-structures records)`

@include scheme/data-structures/records.mdwn@

### `(data-structures loadable-fifo)`

@include scheme/data-structures/loadable-fifo.mdwn@

### `(data-structures sized-stack)`

@include scheme/data-structures/sized-stack.mdwn@

### `(data-structures records utilities)`

@include scheme/data-structures/records/utilities.mdwn@

### `(data-structures variable-width-integer)`

@include scheme/data-structures/variable-width-integer.mdwn@


## Protocol Implementations

### `(protocol csv)`

@include scheme/protocol/csv.mdwn@

### `(protocol length-prefix)`

@include scheme/protocol/length-prefix.mdwn@

### `(protocol saleae-spi)`

@include scheme/protocol/saleae-spi.mdwn@

### `(protocol slip)`

@include scheme/protocol/slip.mdwn@

### `(protocol ufw-regp)`

@include scheme/protocol/ufw-regp.mdwn@


## Device Support Modules

### `(chip-remote devices analog-devices ad9262 tables)`

@include scheme/chip-remote/devices/analog-devices/ad9262/tables.mdwn@

### `(chip-remote devices analog-devices ad9262 registers)`

@include scheme/chip-remote/devices/analog-devices/ad9262/registers.mdwn@

### `(chip-remote devices analog-devices ad9262)`

@include scheme/chip-remote/devices/analog-devices/ad9262.mdwn@

### `(chip-remote devices analog-devices adf4158 tables)`

@include scheme/chip-remote/devices/analog-devices/adf4158/tables.mdwn@

### `(chip-remote devices analog-devices adf4158 registers)`

@include scheme/chip-remote/devices/analog-devices/adf4158/registers.mdwn@

### `(chip-remote devices analog-devices adf4158)`

@include scheme/chip-remote/devices/analog-devices/adf4158.mdwn@

### `(chip-remote devices analog-devices adf4169 tables)`

@include scheme/chip-remote/devices/analog-devices/adf4169/tables.mdwn@

### `(chip-remote devices analog-devices adf4169 registers)`

@include scheme/chip-remote/devices/analog-devices/adf4169/registers.mdwn@

### `(chip-remote devices analog-devices adf4169)`

@include scheme/chip-remote/devices/analog-devices/adf4169.mdwn@

### `(chip-remote devices bosch bme280)`

@include scheme/chip-remote/devices/bosch/bme280.mdwn@

### `(chip-remote devices bosch bme280 registers)`

@include scheme/chip-remote/devices/bosch/bme280/registers.mdwn@

### `(chip-remote devices bosch bme280 tables)`

@include scheme/chip-remote/devices/bosch/bme280/tables.mdwn@

### `(chip-remote devices bosch bno055)`

@include scheme/chip-remote/devices/bosch/bno055.mdwn@

### `(chip-remote devices decawave dw1000)`

@include scheme/chip-remote/devices/decawave/dw1000.mdwn@

### `(chip-remote devices decawave dw1000 registers)`

@include scheme/chip-remote/devices/decawave/dw1000/registers.mdwn@

### `(chip-remote devices decawave dw1000 tables)`

@include scheme/chip-remote/devices/decawave/dw1000/tables.mdwn@

### `(chip-remote devices decawave dw3000)`

@include scheme/chip-remote/devices/decawave/dw3000.mdwn@

### `(chip-remote devices decawave dw3000 commands)`

@include scheme/chip-remote/devices/decawave/dw3000/commands.mdwn@

### `(chip-remote devices decawave dw3000 tables)`

@include scheme/chip-remote/devices/decawave/dw3000/tables.mdwn@

### `(chip-remote devices decawave dw3000 registers)`

@include scheme/chip-remote/devices/decawave/dw3000/registers.mdwn@

### `(chip-remote devices invensense icm-20602)`

@include scheme/chip-remote/devices/invensense/icm-20602.mdwn@

### `(chip-remote devices microchip mcp4351)`

@include scheme/chip-remote/devices/microchip/mcp4351.mdwn@

### `(chip-remote devices microchip mcp4351 registers)`

@include scheme/chip-remote/devices/microchip/mcp4351/registers.mdwn@

### `(chip-remote devices texas-instruments lmh6517)`

@include scheme/chip-remote/devices/texas-instruments/lmh6517.mdwn@

### `(chip-remote devices linear-technology ltc6603)`

@include scheme/chip-remote/devices/linear-technology/ltc6603.mdwn@

### `(chip-remote devices texas-instruments cdce72010)`

@include scheme/chip-remote/devices/texas-instruments/cdce72010.mdwn@

### `(chip-remote devices texas-instruments ads4149)`

@include scheme/chip-remote/devices/texas-instruments/ads4149.mdwn@


## Manufacturer Definition Modules

### `(chip-remote manufacturer analog-devices)`

@include scheme/chip-remote/manufacturer/analog-devices.mdwn@

### `(chip-remote manufacturer bosch)`

@include scheme/chip-remote/manufacturer/bosch.mdwn@

### `(chip-remote manufacturer decawave)`

@include scheme/chip-remote/manufacturer/decawave.mdwn@

### `(chip-remote manufacturer invensense)`

@include scheme/chip-remote/manufacturer/invensense.mdwn@

### `(chip-remote manufacturer linear-technology)`

@include scheme/chip-remote/manufacturer/linear-technology.mdwn@

### `(chip-remote manufacturer microchip)`

@include scheme/chip-remote/manufacturer/microchip.mdwn@

### `(chip-remote manufacturer texas-instruments)`

@include scheme/chip-remote/manufacturer/texas-instruments.mdwn@



## Documentation Generation Modules

### `(documentation combine-markdown)`

@include scheme/documentation/combine-markdown.mdwn@

### `(documentation render-markdown)`

@include scheme/documentation/render-markdown.mdwn@

### `(documentation module)`

@include scheme/documentation/module.mdwn@

### `(documentation more)`

@include scheme/documentation/more.mdwn@
