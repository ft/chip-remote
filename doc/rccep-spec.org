#+TITLE: Remote Control of Configurable Electronic Parts
#+SUBTITLE: RCCEP
#+AUTHOR: Frank Terbeck
#+EMAIL: ft@bewatermyfriend.org
#+OPTIONS: num:t toc:nil
#+ATTR_ASCII: :width 79
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \textwidth 15cm
#+LATEX_HEADER: \hoffset -1.5cm

#+LATEX: \setlength\parskip{0.2cm}

#+LATEX: \vspace{6cm}

#+LATEX: \thispagestyle{empty}

#+BEGIN_abstract

This document specifies a text protocol for communication between a client
(commonly a personal computer) and a remote controller, for the purpose of
interfacing configurable electronic parts such as analog digital converters or
clock distribution blocks with simple interface protocols such as ~UART~, ~SPI~
or ~I2C~ via more common personal computer interfaces, in particular the
universal serial bus (~USB~) or ~TCP/IP~ links. The goal is to specify an
interface on top of which systems can be built that enable tasks such as, but
not limited to, experimentation, rapid prototyping, test automation,
revisioning as well trouble-shooting with hardware projects.

#+END_abstract

#+ASCII:

#+ASCII:

#+ASCII:

#+LATEX: \newpage

#+TOC: headlines 3

#+LATEX: \newpage

* Notation <<sec:notation>>

The specification of elements that constitute messages of the protocol that is
defined in the remainder of this document adheres to the conventions described
in this section.

Elements of the protocol are either /literal/, /mandatory/ or /optional/.

Mandatory elements are enclosed by angle brackets (~<...>~), optional ones are
enclosed by square brackets (~[...]~) and all other elements are literal. Thus
a string like "~foo <bar> [baz]~" specifies that the first element has to be
the literal symbol ~foo~, followed by a mandatory element (named “bar” for
later reference), followed by an optional element (named “baz” for later
reference). Mandatory and optional elements may also contain tags to hint at
the allowed type of data for the element (example: "~[foo:integer]~" specifies
an optional element named ~foo~, that has to be an integer). When a data type
is specified, the name may be omitted if the specification is able to reference
the element uniquely without a name (example: "~ports <integer>~"). Valid type
tags are ~symbol~, ~integer~ and ~boolean~, as well as combined types such as
~role-spec~, where the syntax of the type is specified elsewhere in this
specification.

Mandatory and optional elements may also enumerate different possible names and
types by joining them by vertical bars (~|~). Example: The string
"~<name:symbol|id:integer|invalid>~" specifies a mandatory element, that may
either be referenced by ~name~ (in which case it has to be a symbol) or ~id~
(in which case it has to be an integer) or ~invalid~. The latter case doesn't
specify a data type; the specification has to clarify how this version of the
element would be used (example: ~invalid~ could be a literal symbol that may be
used by the protocol in the given position of the specified message).

An element does not necessarily refer to a single token in the sense of the
protocol. If it does refer to multiple tokens, the element's entry shall end in
three dots (example: "~malformed-request [reason...]~").

#+LATEX: \newpage

* RCCEP Model
** Basic Structure <<sec:basic-structure>>

An ~RCCEP~ system consists of a /controlling client/ and a /remote controller/
that possesses one or more /Ports/ through which /Devices/ are attached to it.
The client talks to the controller using the protocol described herein.

- /Controlling Client/ :: The /Controlling Client/ is one of the subscribers of
  an ~RCCEP~ communication. It is a logic connected to the /Remote Controller/,
  that sends requests and processes replies.

- /Remote Controller/ :: The /Remote Controller/ is the second subscriber of an
  ~RCCEP~ communication. It is a logic the /Controlling Client/ can connect to.
  It receives /Requests/ and emits /Replies/.

  It is equipped with a number of /Ports/ it uses to turn client requests into
  electronic signaling to control electronic parts attached to the port.

- /Device/ :: A /Device/ is an electronic part with a configuration interface,
  that is connected to a port of the /Remote Controller/.

- /Request/ :: A /Request/ is a message from the /Controlling Client/ to the
  /Remote Controller/.

- /Reply/ :: A /Reply/ is a message from the /Remote Controller/ to the
  /Controlling Client/.

- /Ports/ :: A /Port/ is an interface between the /Remote Controller/ and a
  /Device/. /Ports/ consist of one or more /Lines/ and are set to a /Mode/ that
  specifies its operation.

- /Modes/ :: /Modes/ specify how a /Port/ communicates with a /Device/.
  Possible /Modes/ are documented in section [[sec:port-modes]].

- /Lines/ :: A /Line/ is a single electronic signaling device, that represents
  a logical value. In microcontroller terms a line is often called a “pin”. A
  /Line/ can be assigned a /Role/ to implement a /Mode/.

- /Roles/ :: /Roles/ are specific to /Modes/. A /Role/ specifies which part of
  a /Mode/ a given /Line/ implements. Its syntax is a symbol in the sense of
  the protocol in which the colon character (hex: ~0x3a~) is disallowed.

  If a /Role/ is made up of multiple /Lines/, then they are indexed in the
  following format:

  - ~<role:symbol>:<integer>~: ~role~ is the name specifing the base role a
    line is assigned. ~<integer>~ is the role index of the specific line.
    Indexing starts at zero. Examples would be ~data:0~, ~data:1~ etc.

** Protocol Basics <<sec:proto-basics>>
*** Protocol Character Set

Communication is done in seven bit ~ASCII~ strings and only its /printable
subset/ (the byte range from ~0x20~ to ~0x7E~) shall be used to constitute
messages of the protocol. The only other character allowed in an ~RCCEP~
communication channel is the line-feed character (see section
[[sec:proto-basics-messages]] for details).

*** Messages <<sec:proto-basics-messages>>

The ~RCCEP~ protocol itself is of line-based design. Any message between the
subscribers of an ~RCCEP~ communication is a string of characters of its
character set, that end in an ASCII line-feed (hex: ~0x0a~). The line-feed
itself is not part of the message.

Messages of the protocol (/Requests/ and /Replies/; see section
[[sec:basic-structure]] for details) consist of multiple tokens.

A message is split into tokens upon encountering these conditions:

- When one or more consecutive ~ASCII~ space bytes (hex: ~0x20~) are
  encountered. This produces a list of scalar tokens.

- In replies, when a single ~ASCII~ semicolon (hex: ~0x3b~) is encountered.
  This produces a list of lists. The semicolon is not allowed in requests.

- Requests may define private parsing rules of string arguments.

Note that other ~ASCII~ whitespace bytes are *not* considered for tokenisation.

The maximum length of request messages is limited to 127 bytes. Replies may be
of arbitrary length. The semicolon list-of-list replies are used to replace the
multiline mode from previous versions of the protocol.

*** Message Exchange

The remote controller of the system never engages communication with the
client. Every transmission in one direction must be met with a reply in the
opposite direction. In case a request does not trigger a meaningful response
value, the symbol ~ok~ shall be used to acknowledge that the request was
processed.

*** Encoding of Data Types

The protocol uses these data types:

- symbols
- integers
- booleans
- key-value-pairs

Symbols are used as literal requests, responses and symbolic values. They are
*case-sensitive*, which means that "~foo~" and "~Foo~" are different values.
Symbols may contain alpha-numeric characters as well as characters from the set
of ~[-_/+]~. Symbols may not begin with a decimal digit character.

Integers represent numeric values within the protocol. They are transmitted in
strings of decimal digits, unless prefixed by a base-specification. The
following prefixes are available:

- ~b#…~: Binary number
- ~o#…~: Octal number
- ~d#…~: Decimal number
- ~h#…~: Hexadecimal number

The ~a-f~ range of a hexadecimal digit may be represented in upper or lower
case and may also be mixed.

In boolean contexts, the symbol ~true~ represents a true value; and the symbol
~false~ represents a false value.

Key-value-pairs are a symbol connected to a number by an ASCII colon (~:~).

*** Extensions

The protocol reserves the namespace of requests starting with an ~ASCII~ plus
sign (hex: ~0x2b~) for implementation defined purposes.

* Protocol Details

The very basics of the protocol are specified in section [[sec:proto-basics]]. They
/always/ apply. This section specifies all requests and replies the protocol
can exchange.

** Types of Replies

These are the generic replies of the protocol:

- "~ok~": This reply is used whenever a request does not prompt another more
  meaningful reply.

- "~wtf [reason...]~": Used if a request could not be carried out. The reason
  the request was rejected may be returned as the remaining tokens of the
  reply's line. Returning a reason is optional.

- "~malformed-request [reason...]~": Used in case the last request could not be
  processed. The reply may provide a reason as to why processing failed as the
  rest of the reply's tokens. Returning a reason is optional.

- "~broken-value [value]~": Used if an unexpected value was encountered. The
  broken value may be retured as the second token of the reply's line.
  Returning the offending value is optional.

- "~value-out-of-range [value]~": Used if a numeric value was encountered, but
  its value does not fall into the valid range for the request in question. The
  invalid value may be retured as the second token of the reply's line.
  Returning the offending value is optional.

Other replies are request-dependent. Their format is documented with the
specific request.

** Request Specification
*** Fixed Reply Requests

These request cause the /remote controller/ to return a know reply. These are
useful to test connections once they are established.

**** ~hi~ Request

Synopsis:\hspace{0.5cm} ~hi~

\vspace{0.3cm}\noindent This request takes no argument.

This request can be used to test the connection to the remote controller. The
reply to this request shall be:

- "~Hi there, stranger.~"

**** ~bye~ Request

Synopsis:\hspace{0.5cm} ~bye~

\vspace{0.3cm}\noindent This request takes no argument.

This request can be used to test the connection to the remote controller. The
remote controller's reply to this request shall be:

- "~Have a nice day.~"

*** Querying Requests
**** ~capabilities~ Request

Synopsis:\hspace{0.5cm} ~capabilities~

\vspace{0.3cm}\noindent This request takes no argument.

This request returns a semicolon separated list of replies. Single symbol
entries of the form ~"+foobar"~ list extension requests, implemented by the
firmware. List entries of the form ~"key value"~ reflect implementation defined
capabilities of the firmware. Mandatory capabilities are:

- ~rx-buffer-size <value:integer>~ The size of the firmware's receive buffer in
  octets.
- ~maximum-arguments <value:integer>~ Maximum number of arguments to a request
  supported by the firmware.

**** ~lines~ Request

Synopsis:\hspace{0.5cm} ~lines <port-index:integer>~

\vspace{0.3cm}\noindent The ~lines~ request takes one non-optional argument: In
index if the port to query information about.

This request returns a multiline reply. Each line shows to which role the line
of a given index assigned to:

- "~<index:integer> <role:symbol> [fixed]~"

Roles are specific to modes (see section [[sec:port-modes]]). The default role
assignment of a port is implementation defined. If ~fixed~ is specified, the
role assignment of that line cannot be changed.

**** ~modes~ Request

Synopsis:\hspace{0.5cm} ~modes~

\vspace{0.3cm}\noindent This request takes no argument. The ~modes~ request
returns a multiline reply. Each line names one mode the remote controller
implements. Possible modes are documented in section [[sec:port-modes]].

**** ~ports~ Request

Synopsis:\hspace{0.5cm} ~ports~

\vspace{0.3cm}\noindent This request takes no argument.

The ~ports~ request returns a multiline reply. The lines shall contain the
following:

- "~ports <integer>~": Where ~<integer>~ indicates the number of ports
  available on the remote controller.

- "~focus <integer|none>~": Where ~<integer>~ indicates the currently focused
  port. If no port is currently focused, the symbol ~none~ is returned.

**** ~version~ Request

Synopsis:\hspace{0.5cm} ~version~

\vspace{0.3cm}\noindent This request takes no argument.

This request returns the protocol version the remote controller implements. The
reply shall be formatted like this:

- "~VERSION <integer> <integer> <integer>~"

Where the three integers describe major, minor and micro version of the
implemented protocol in the order specified (see section [[sec:version-number]] for
details). For backward compatibility, this request may be given in upper case
as ~VERSION~ as well. The upper case ~VERSION~ prefix in the reply is for
backward compatibility as well.

*** Configuration Requests
**** ~focus~ Request

Synopsis:\hspace{0.5cm} ~focus <port-index:integer>~

\vspace{0.3cm}\noindent The ~focus~ request takes one non-optional argument:
The index of the port to focus. Focussing a port means that subsequent data
transmissions are carried out by using the specified port.

Default focus is implementation defined.

**** ~init~ Request

Synopsis:\hspace{0.5cm} ~init <port-index:integer>~

\vspace{0.3cm}\noindent The ~init~ request takes one non-optional argument: The
index of the port to initialise. If a port has even a single configurable
property, this request is required initially before any other operation with
that port and then again after any set of changes with the port's properties.

**** ~line~ Request

Synopsis:\hspace{0.5cm} ~line <port:integer> <line:integer> <role:role-spec>~

\vspace{0.3cm}\noindent The ~line~ request takes three non-optional arguments.

~port~ specifies the index of the port to configure. ~line~ specifies the index
of the line within the port to configure. ~<role>~ describes the role within
the active mode the line is to be set to. Roles are specific to modes (see
section [[sec:port-modes]]).

**** ~mode~ Request

Synopsis:\hspace{0.5cm} ~mode <port:integer> <mode:symbol>~

\vspace{0.3cm}\noindent The ~mode~ request takes two non-optional arguments.

~port~ specifies the index of the port to configure, while the ~mode~ parameter
specifies the desired mode of the port to configure (see section
[[sec:port-modes]]).

**** ~port~ Request

Synopsis:\hspace{0.5cm} ~port <port-index:integer>~

\vspace{0.3cm}\noindent The ~port~ request takes one non-optional argument: The
index of the port to query information about.

This request returns a multiline reply. The lines contain key-value pairs of
properties for the port in question. These are the generic properties that may
be returned:

- "~lines <integer> [fixed]~": ~<integer>~ defines the number of lines the port
  has access to.

- "~mode <mode:symbol> [fixed]~": Indicates the ~mode~ the port is currently
  running in.

- "~rate <integer> [fixed]~": Indicates the symbol-rate with which the port
  operates. A value of zero indicates an implementation-defined default
  symbol-rate.

The request may return other mode-specific properties (see section
[[sec:port-modes]]).

All properties that return a ~fixed~ as their third and final token are
read-only values. This is true for generic as well as mode-specific properties.

**** ~set~ Request

Synopsis:\hspace{0.5cm} ~set <port:integer> <key:symbol> <value>~

\vspace{0.3cm}\noindent The ~set~ request takes three non-optional arguments.

~port~ is the index of the port to configure. ~key~ is the property's name to
set. ~value~ is the new value for the property. All properties to the set
request are mode specific. See section [[sec:port-modes]] for details.

*** Transmission Requests
**** ~transmit~ Request

Synopsis:\hspace{0.5cm} ~transmit <data:data-spec>[;<data:data-spec>…]~

\vspace{0.3cm}\noindent The ~transmit~ request takes one or more optional
arguments. These specify the data that is to be transmitted to the currently
focused port.

The ~data-spec~ type can take the following forms:

- ~<data:integer>~: An integer argument presents the raw data used for a single
  transmission. On ~SPI~ ports each integer represents a complete frame. In
  case the given integer is larger than the frame-length configured for the
  port's current mode, it is truncated to that size. In case it is smaller, the
  value is padded with zeros towards the most-significant bit.

- ~r:<length:integer>~ This specification defines read access of the length
  defined by the integer portion to the focused port. The semantics are port
  mode dependent. On ~I2C~ ports, it defines the number of octets to read from
  the device.

- ~w:<length:integer> [data:integer [t:<times:integer>] […]]~ This
  specification defines the data to use in a write access to the focused port.
  The details depend on port mode. On ~I2C~ ports, it defines the octets
  (range: ~0…255~) to write to the focused device. The length of the write
  access are specified explicitly by the key-value pair that initialises the
  sequence. If the sequence of octets is shorter than the indicated
  write-length, the last octect specified is repeated to fill the rest of the
  transmission. The optional ~t:n~ multiplier allows specifying an octet to be
  repeated multiple times in the actual message.

The request returns a port mode dependent value:

- On ~SPI~ ports, it contains reply from the attached device. If more than one
  argument was given, a list of integers, one for each input argument, is
  returned.

- On ~I2C~ ports, the return value is a list of lists of octets, corresponding
  to the specified read accesses. The data for multiple read operations are
  separated by commas. The ~t:n~ multiplier used with ~write~ specifications is
  allowed as well.

* Port Modes <<sec:port-modes>>
** SPI
*** SPI Specific Properties

What follows is a list of properties the ~port~ request may return with ports
configured for ~SPI~ mode.

- ~frame-length <integer>~: Indicates the number of bits that are used per
  transmission.

- ~cs-lines <integer>~: Indicates the number of chip-select lines the port
  offers.

- ~cs-polarity <active-high|active-low>~: Use of either of the listed symbols
  indicates whether the chip-select lines operate as ~active-high~ or
  ~active-low~ pins.

- ~clk-polarity <rising-edge|falling-edge>~: Indicates whether the clock line
  triggers data transfer on its rising (~rising-edge~) or its falling edge
  (~falling-edge~).

- ~clk-phase-delay <boolean>~: A true value indicates that phase delay is used
  on the clock line. Otherwise a false value indicates that it is not used.

- ~bit-order <msb-first|lsb-first>~: Indicates whether serial data transmission
  is done starting at the most-significant bit (~msb-first~) or at the
  least-significant bit (~lsb-first~).

*** SPI Line Roles

- ~clk~: Clock signal of the ~SPI~ bus

- ~cs~: Chip-Select; this may be a multi-line role.

- ~mosi~: Master-Out-Slave-In, the unidirectional ~SPI~ data line from master
  to device.

- ~miso~: Master-In-Slave-Out, the unidirectional ~SPI~ data line from device
  to master.

*** SPI Addressing

The ~address~ request with the ~SPI~ protocol controls the state of an ~SPI~
port's chip-select lines for the following data transmissions. The request's
argument is interpreted as a bit-mask representing the intended values of all
chip-select lines. The lines are mapped to the bit-mask in order of their index
with ~cs:0~ being mapped to the least significant bit of the address.

Default ~SPI~ chip-select addressing is implementation defined.

* Version <<sec:version-number>>

- Current status of the specification: *Draft*

This document specifies version 3.0.0 of the protocol. The ~version~ request
would therefore cause a "~VERSION 3 0 0~" reply with remote controllers, that
implement this version of the protocol. In detail that means:

|---------------+-----|
| <l>           | <c> |
| Major Version | *3* |
| Minor Version | *0* |
| Micro Version | *0* |
|---------------+-----|

** Major Version Number

The major version number will be changed *only* to indicate differences in the
protocol's basics as described in section [[sec:proto-basics]].

** Minor Version Number

Changes in the minor version number indicate changes in previously existing
features or the list of mandatory implemented features.

** Micro Version Number

Changes in the micro version number indicate the addition of new optional
features within the protocol or changes in the specification that do not
introduce incompatibilities with previous versions.

#+LATEX: \vspace{0.5cm}

Note: For best interoperability, the client-side's protocol version and the
remote controller's protocol version should match in all three parts of the
version number.

** Version History

*** Version 2.0.0 → 3.0.0

- Version 3 removes protocol states. All requests and replies are exactly one
  line of ASCII text, delimited by line-feed characters.

- Version 3 uses lower case ASCII protocol symbols, unlike version 2 which used
  upper case symbols. Only version detection still uses upper case symbols and
  uses an upper case symbol in its reply.

*** Previous Versions

The protocol's major version number starts at version "~2~" in this
specification. The reason for that is that version "~1~" was a previous
protocol, that was never specified. That version was used in connection with a
logic in the remote controller that was a lot more device-specific than the
current specification.

In order to make the protocol more generic and to reduce the complexity of the
remote controller's firmware, any device-specific operation was shifted onto
the controlling client.

The basic operation of that historic version was quite similar to that of
version number two, but the shift in the operational paradigm made it
impossible to keep the new protocol backwards compatible in any way. Thus, this
specification starts out at major version number "~2~".

# #+LATEX: \newpage

* Full Copyright Statement

Copyright © 2011-2021 ~Frank Terbeck <ft@bewatermyfriend.org>~.
All Rights Reserved.

This document and translations of it may be copied and furnished to others, and
derivative works that comment on or otherwise explain it or assist in its
implementation may be prepared, copied, published and distributed, in whole or
in part, without restriction of any kind, provided that the above copyright
notice and this paragraph are included on all such copies and derivative works.
However, this document itself may not be modified in any way, such as by
removing the copyright notice.

The limited permissions granted above are perpetual and will not be revoked by
the authors or their successors or assigns.

This document and the information contained herein is provided on an “AS IS”
basis and THE AUTHORS DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION HEREIN WILL NOT
INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR
A PARTICULAR PURPOSE.
