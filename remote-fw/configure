#!/bin/sh

# Copyright (c) 2011-2014 chip-remote workers, All rights reserved.
#
# Terms for redistribution and use can be found in LICENCE.

if [ $# -lt 2 ]; then
    printf 'usage: configure <arch> <target> [OPTION(s)...]\n'
    exit 0
fi

arch=$1
target=$2
shift 2

ARCH=$(printf 'CR_%s' $arch | tr a-z A-Z)
TARGET=$(printf 'CR_%s' $target | tr a-z A-Z)
ALLTARGETS=

case "$arch" in
msp430)
    CC=msp430-gcc
    STRIP=msp430-strip
    SIZE=msp430-size
    OBJCOPY=msp430-objcopy
    OBJDUMP=msp430-objdump
    OBJEXT=a43
    OBJFMT=ihex
    CFLAGS="-Wall -Wnested-externs -Wmissing-prototypes -Wstrict-prototypes"
    CFLAGS="$CFLAGS -std=gnu99"
    CFLAGS="$CFLAGS -DMSPGCC_BUILD"
    COPTIM=-Os
    CDEBUG=
    CONFIG_H=config.msp430.h
    MSPGCC_LOCATION=/usr
    ;;
sim)
    CC=clang
    STRIP=strip
    SIZE=:
    OBJCOPY=:
    OBJDUMP=:
    OBJEXT=a43
    OBJFMT=ihex
    CFLAGS="-Wall -Wnested-externs -Wmissing-prototypes -Wstrict-prototypes"
    CFLAGS="$CFLAGS -std=gnu99"
    COPTIM=-Os
    CDEBUG=
    CONFIG_H=config.sim.h
    ;;
*)
    printf 'Unknown arch: %s\n' "$arch"
    exit 1
    ;;
esac

is_opt() {
    case "$1" in
    -*) return 0 ;;
    *) return 1 ;;
    esac
}

optimizer=size
while is_opt "$1"; do
    case "$1" in
    -debug)
        COPTIM=-O0
        CDEBUG=-g
        optimizer=debug
        ;;
    -performance)
        COPTIM=-O2
        CDEBUG=
        optimizer=performance
        ;;
    *)
        printf 'Unknown option `%s'\''\n' "$1"
    esac
    shift
done

case "$target" in
msp430f1481)
    if [ "$arch" != msp430 ]; then
        printf 'Target %s requires arch msp430!\n' "$target"
        exit 1
    fi
    CMCU=-mmcu="$target"
    CTARGETFLAGS=-ffreestanding
    ;;
stdout)
    CMCU=
    CTARGETFLAGS=
    ;;
*)
    printf 'Unknown target %s\n' "$target"
    ;;
esac

ALLTARGETS='$(NAME).elf'
[ x"$OBJCOPY" = x: ] || ALLTARGETS="$ALLTARGETS "'$(NAME).$(OBJEXT)'
[ x"$OBJDUMP" = x: ] || ALLTARGETS="$ALLTARGETS "'$(NAME).lst'

OBJECTS=
SOURCES=

for file in *.c arch/"$arch".c; do
    o=${file%.*}.o
    if [ x"$SOURCES" = x ]; then
        SOURCES=$file
    else
        SOURCES="$SOURCES $file"
    fi
    if [ x"$OBJECTS" = x ]; then
        OBJECTS=$o
    else
        OBJECTS="$OBJECTS $o"
    fi
done

filter() {
    sed -e "s,@@ARCH@@,${ARCH},g" \
        -e "s,@@TARGET@@,${TARGET},g" \
        -e "s,@@ALLTARGETS@@,${ALLTARGETS},g" \
        -e "s,@@CC@@,${CC},g" \
        -e "s,@@STRIP@@,${STRIP},g" \
        -e "s,@@SIZE@@,${SIZE},g" \
        -e "s,@@OBJCOPY@@,${OBJCOPY},g" \
        -e "s,@@OBJDUMP@@,${OBJDUMP},g" \
        -e "s,@@OBJEXT@@,${OBJEXT},g" \
        -e "s,@@OBJFMT@@,${OBJFMT},g" \
        -e "s,@@CFLAGS@@,${CFLAGS},g" \
        -e "s,@@COPTIM@@,${COPTIM},g" \
        -e "s,@@CDEBUG@@,${CDEBUG},g" \
        -e "s,@@CONFIG_H@@,${CONFIG_H},g" \
        -e "s,@@CMCU@@,${CMCU},g" \
        -e "s,@@CTARGETFLAGS@@,${CTARGETFLAGS},g" \
        -e "s,@@SOURCES@@,${SOURCES},g" \
        -e "s,@@OBJECTS@@,${OBJECTS},g" \
        -e "s,@@MSPGCC_LOCATION@@,${MSPGCC_LOCATION},g"
}

printf '\n  Configuring project for archtecture `%s'\''...\n' "$arch"
printf '    Specific target `%s'\''...\n' "$target"
printf '  Optimizer settings: `%s'\''...\n' "$optimizer"
printf '\n  Generating files...\n'

for file in Makefile platform.h config."$arch".h; do
    printf '    => "%s"\n' "$file"
    filter < "$file".in > "$file"
done

printf '\n  To build the firmware, issue the following commands:\n'

which mkdep 2>&1 > /dev/null
rc=$?
if [ "$rc" = 0 ]; then
    printf '   %% make depend\n'
fi
printf '   %% make\n\n'
