;; Copyright (c) 2015 chip-remote workers, All rights reserved.
;;
;; Terms for redistribution and use can be found in LICENCE.

(define-module (chip-remote compiler level-three)
  #:use-module (chip-remote compiler)
  #:export (generate-level-three))

;; The API generated by this backend is fairly similar to the one generated by
;; (chip-remote compiler level-two). Where that backend would generate a
;; function like:
;;
;;     (set-r-divider regval value)
;;
;; ...this backend generates a function like this:
;;
;;     (set-r-divider connection value)
;;
;; ...where instead of ‘regval’, the function uses a ‘connection’ to figure out
;; the current register value in an actual device, change that value and send
;; it back to the device via that connection.
;;
;; In case a chip is a write-only device, a machinery based on the default
;; register values of that chip in question is generated.

(define (generate-encoders keyword data)
  '())

(define (generate-decoders keyword data)
  '())

(define-syntax generate-level-three
  (lambda (x)
    (syntax-case x ()
      ((kw file)
       (let* ((fname (determine-file-name (syntax->datum #'file)))
              (data (analyse-register-map #'kw (read-file #'kw fname))))
         (with-syntax (((encoders ...) (generate-encoders #'kw data))
                       ((decoders ...) (generate-decoders #'kw data)))
           #'(begin encoders ...
                    decoders ...)))))))
