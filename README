  chip-remote: A protocol for remote controlling runtime-configurable chips

Many powerful and flexible electronic parts, are configurable at runtime via
simple interfaces like SPI or I2C. In prototyping, revising and testing, it is
useful to be able to control these chips from a computer, preferably via a high
level programming language.

With SPI, I2C and so on, you don't have readily available interfaces to general
personal computers. That is why `chip-remote' actually defines an ASCII protocol
of which the remote part can be implemented in low-cost micro-controllers, that
can be equipped with cheap USB/UART converters. That way you can talk to the
micro-controller, that looks like a serial device to your OS. You will be able
to open and write to that device almost as if you are writing to a file (except
for serial-line setup like baud-rate, parity generation, word width, number of
stop-bits and all that).

The protocol design attempts to support multiple configurable chips on different
interfaces on a single USB/micro-controller connection. Much of the protocol is
supposed to be optional for micro-controllers to implement, to be able to the
most low-cost micro-controllers available.

The reference client implementation is done in Guile scheme. Scheme is a very
high-level programming language of the Lisp variety, that has (even though it is
one of the oldest programming languages available) a host of very powerful
features. Guile scheme is a free software implementation of the language, with a
lot of extensions, that is readily available on many platforms.

The remote-board implemenation has been done in C in the past; and a more
featureful reference implemenation is in the planning phase. The target language
is going to be ANSI C, with as little micro-controller dependent code as
possible.

All of this is still VERY MUCH work in progress.
