mainmenu "Chip Remote Firmware"

menu "Firmware Specific Build Configuration"

menu "RCCEP Parser"

config INPUT_BUFFER_SIZE
    int "Input Buffer Size in Bytes"
    default 64
    help
      This sets the maximum input line size for the RCCEP protocol
      implemented by the firmware.

config MAX_PROTOCOL_TOKENS
    int "Maximum Number of Tokens in Protocol Parser"
    default 16
    help
      The RCCEP parser implemented by the chip-remote firmware is
      completely static from a memory allocation point of view. This
      setting specifies the maximum number of tokens, the protocol
      parser can handle for any given line of protocol input. If
      increased, you likely want to increase CONFIG_INPUT_BUFFER_SIZE
      as well.

endmenu

menu "Zephyr Based I2C Port Implementation"

config OS_I2C_TX_BUFFER_SIZE
    int "Transmission buffer size"
    default 128
    help
      Number of bytes allocated for I2C write messages.

config OS_I2C_RX_BUFFER_SIZE
    int "Receive buffer size"
    default 128
    help
      Number of bytes allocated for I2C read messages.

endmenu

endmenu

# This is from zephyr-3.0.0, but without the (toolchain = zephyr) check. I
# think this is a bug in zephyr. The intend from the comment in 0e0f878ddc
# seems to be to avoid trying to use picolibc with clang, and to only enable
# support for GNU based toolchains. "gnuarmemb" is one of those however. So
# that check is too restrictive. Luckily it is possible to override this be-
# haviour in the application's Kconfig file. That's what we'll do for now.
config PICOLIBC_SUPPORTED
    bool
    depends on !NATIVE_APPLICATION
    depends on !(CPP && "$(ZEPHYR_TOOLCHAIN_VARIANT)" = "zephyr")
    default y

source "Kconfig.zephyr"
